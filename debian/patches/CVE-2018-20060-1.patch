Backport of:

From 3d7f98b07b6e6e04c2e89cdf5afb18024a2d804c Mon Sep 17 00:00:00 2001
From: SethMichaelLarson <sethmichaellarson@protonmail.com>
Date: Sun, 25 Mar 2018 20:30:13 -0500
Subject: [PATCH] Add forward_auth_headers_across_hosts parameter to Retry

---
 urllib3/util/retry.py | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

Index: python-urllib3-1.13.1/urllib3/util/retry.py
===================================================================
--- python-urllib3-1.13.1.orig/urllib3/util/retry.py	2019-05-13 15:10:21.240037642 -0400
+++ python-urllib3-1.13.1/urllib3/util/retry.py	2019-05-13 15:12:17.408435258 -0400
@@ -102,6 +102,11 @@ class Retry(object):
     :param bool raise_on_redirect: Whether, if the number of redirects is
         exhausted, to raise a MaxRetryError, or to return a response with a
         response code in the 3xx range.
+
+    :param bool forward_auth_headers_across_hosts:
+        Whether to forward Authentication headers if a response is received
+        that redirects to a different host than the original request.
+        Defaults to False.
     """
 
     DEFAULT_METHOD_WHITELIST = frozenset([
@@ -112,7 +117,8 @@ class Retry(object):
 
     def __init__(self, total=10, connect=None, read=None, redirect=None,
                  method_whitelist=DEFAULT_METHOD_WHITELIST, status_forcelist=None,
-                 backoff_factor=0, raise_on_redirect=True, _observed_errors=0):
+                 backoff_factor=0, raise_on_redirect=True, _observed_errors=0,
+                 forward_auth_headers_across_hosts=False):
 
         self.total = total
         self.connect = connect
@@ -128,6 +134,8 @@ class Retry(object):
         self.backoff_factor = backoff_factor
         self.raise_on_redirect = raise_on_redirect
         self._observed_errors = _observed_errors  # TODO: use .history instead?
+        self.forward_auth_headers_across_hosts = \
+            forward_auth_headers_across_hosts
 
     def new(self, **kw):
         params = dict(
@@ -138,6 +146,7 @@ class Retry(object):
             backoff_factor=self.backoff_factor,
             raise_on_redirect=self.raise_on_redirect,
             _observed_errors=self._observed_errors,
+            forward_auth_headers_across_hosts=self.forward_auth_headers_across_hosts
         )
         params.update(kw)
         return type(self)(**params)
